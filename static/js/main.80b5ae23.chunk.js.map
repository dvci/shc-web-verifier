{"version":3,"sources":["components/HealthCardDisplay/iisstandards_tradename.xml","components/HealthCardDisplay/iisstandards_cvx.xml","components/HealthCardDisplay/HealthCardDisplay.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","bold","fontWeight","HealthCardDisplay","patientData","classes","useState","tradenames","setTradenames","cvxCodes","setCvxCodes","fetchCdcXml","file","a","axios","get","Accept","response","data","replace","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","length","Error","React","useEffect","tradenamesXml","prodInfos","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","prodInfo","iterateNext","tn","children","textContent","trim","cvxXml","cvx","fetchTradenames","fetchCvx","immunizationDisplayName","codings","coding","code","system","Typography","gutterBottom","className","name","dateOfBirth","variant","Grid","container","spacing","direction","justifyContent","alignItems","immunizations","map","i","immunization","fullUrl","resource","item","Card","CardHeader","title","vaccineCode","CardContent","occurrenceDateTime","lotNumber","performer","actor","display","immunizationDisplay","App","isScanning","setIsScanning","qrData","setQrData","stopScanning","video","document","getElementById","srcObject","getTracks","forEach","track","stop","remove","hidden","tick","readyState","HAVE_ENOUGH_DATA","canvasElement","canvas","getContext","loadingMessage","statusMessage","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","jsQR","inversionAttempts","startsWith","card","bundle","JSON","parse","vc","credentialSubject","fhirBundle","patient","entry","find","resourceType","nameElement","text","prefix","join","given","family","suffix","extractPatientName","birthDate","filter","extractImmunizations","extractPatientData","qrString","sliceIndex","lastIndexOf","dataString","slice","match","charPair","String","fromCharCode","split","decodedPayload","Base64","toUint8Array","inflatedPayload","pako","inflateRaw","TextDecoder","decode","decodeQr","innerText","requestAnimationFrame","startButton","type","id","onClick","createElement","appendChild","navigator","mediaDevices","getUserMedia","facingMode","then","stream","setAttribute","play","catch","disabled","stopButton","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.80b5ae23.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iisstandards_tradename.ca620fff.xml\";","export default __webpack_public_path__ + \"static/media/iisstandards_cvx.f9c3cb7c.xml\";","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Card, CardContent, CardHeader, Grid, Typography\n} from '@material-ui/core';\nimport axios from 'axios';\nimport tradenamesXml from './iisstandards_tradename.xml';\nimport cvxXml from './iisstandards_cvx.xml';\n\nconst useStyles = makeStyles({\n  bold: {\n    fontWeight: 'bold'\n  }\n});\n\nconst HealthCardDisplay = ({ patientData }) => {\n  const classes = useStyles();\n\n  const [tradenames, setTradenames] = useState({});\n  const [cvxCodes, setCvxCodes] = useState({});\n\n  async function fetchCdcXml(file) {\n    const response = await axios.get(file, {\n      Accept: 'application/xml'\n    });\n    let data = await response.data;\n    data = data.replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(data, 'application/xml');\n    if (xmlDoc.getElementsByTagName('parsererror').length > 0) {\n      throw new Error('Error parsing XML');\n    }\n    return xmlDoc;\n  }\n\n  React.useEffect(() => {\n    async function fetchTradenames() {\n      const xmlDoc = await fetchCdcXml(tradenamesXml);\n      const prodInfos = xmlDoc.evaluate('//productnames/prodInfo',\n        xmlDoc, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\n      let prodInfo = prodInfos.iterateNext();\n      const tn = {};\n      while (prodInfo) {\n        if (tn[prodInfo.children[5].textContent.trim()]) {\n          tn[prodInfo.children[5].textContent.trim()] = prodInfo.children[3].textContent\n        } else {\n          tn[prodInfo.children[5].textContent.trim()] = prodInfo.children[1].textContent\n        }\n        prodInfo = prodInfos.iterateNext();\n      }\n      setTradenames(tn);\n    }\n\n    async function fetchCvx() {\n      const xmlDoc = await fetchCdcXml(cvxXml);\n      const prodInfos = xmlDoc.evaluate('//CVXCodes/CVXInfo',\n        xmlDoc, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\n      let prodInfo = prodInfos.iterateNext();\n      const cvx = {};\n      while (prodInfo) {\n        cvx[prodInfo.getElementsByTagName('CVXCode')[0].textContent.trim()] = prodInfo.getElementsByTagName('ShortDescription')[0].textContent\n        prodInfo = prodInfos.iterateNext();\n      }\n      setCvxCodes(cvx);\n    }\n\n    fetchTradenames();\n    fetchCvx();\n  }, []);\n\n  const immunizationDisplayName = (codings) => {\n    if (codings.length === 0) return '';\n\n    const coding = codings[0];\n\n    if (!tradenames[coding.code]) {\n      if (!cvxCodes[coding.code]) {\n        return coding.system ? `${coding.system}#${coding.code}` : coding.code;\n      }\n      return cvxCodes[coding.code];\n    }\n    return tradenames[coding.code];\n  };\n\n  const immunizationDisplay = (immunization) => {\n    const { fullUrl, resource } = immunization;\n\n    return (\n      <Grid item key={fullUrl}>\n        <Card variant=\"outlined\">\n          <CardHeader\n            title={\n              resource.vaccineCode ? immunizationDisplayName(resource.vaccineCode.coding) : ''\n            }\n            classes={{ title: classes.bold }}\n          />\n          <CardContent>\n            <Typography gutterBottom>\n              <span className={classes.bold}>Date: </span>\n              <span>{resource.occurrenceDateTime}</span>\n            </Typography>\n            {resource.lotNumber && (\n              <Typography gutterBottom>\n                <span className={classes.bold}>Lot: </span>\n                <span>{resource.lotNumber}</span>\n              </Typography>\n            )}\n            {(resource.performer && resource.performer.length > 0) && (\n              <Typography gutterBottom>\n                <span className={classes.bold}>Performer: </span>\n                <span>{resource.performer[0].actor.display}</span>\n              </Typography>\n            )}\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  }\n\n  return (\n    <div>\n      <Typography gutterBottom>\n        <span className={classes.bold}>Name: </span>\n        <span>{patientData.name}</span>\n      </Typography>\n      <Typography gutterBottom>\n        <span className={classes.bold}>Date of Birth: </span>\n        <span>{patientData.dateOfBirth}</span>\n      </Typography>\n      <Typography variant=\"h4\"> Immunizations </Typography>\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n      >\n        {patientData.immunizations.map((i) => immunizationDisplay(i))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default HealthCardDisplay;\n","import './App.css';\n\nimport React, { useState } from 'react';\nimport { Base64 } from 'js-base64';\nimport jsQR from 'jsqr';\nimport pako from 'pako';\nimport HealthCardDisplay from 'components/HealthCardDisplay';\n\nfunction App() {\n  const [isScanning, setIsScanning] = useState(false);\n  const [qrData, setQrData] = useState(null);\n\n  const decodeQr = (qrString) => {\n    const sliceIndex = qrString.lastIndexOf('/');\n    const rawPayload = qrString.slice(sliceIndex + 1);\n    const encodingChars = rawPayload.match(/\\d\\d/g);\n    const jwsString = encodingChars.map((charPair) => String.fromCharCode(+charPair + 45)).join('');\n    const dataString = jwsString.split('.')[1];\n    const decodedPayload = Base64.toUint8Array(dataString);\n    const inflatedPayload = pako.inflateRaw(decodedPayload);\n    const payload = new TextDecoder().decode(inflatedPayload);\n    return payload;\n  };\n\n  const extractPatientName = (patient) => {\n    const nameElement = patient.name[0];\n\n    if (nameElement.text) {\n      return nameElement.text;\n    }\n\n    const prefix = nameElement.prefix ? nameElement.prefix.join(' ') : '';\n    const given = nameElement.given ? nameElement.given.join(' ') : '';\n    const family = nameElement.family ? nameElement.family : '';\n    const suffix = nameElement.suffix ? nameElement.suffix.join(' ') : '';\n\n    const name = [prefix, given, family, suffix].join(' ');\n\n    return name.trim();\n  };\n\n  const extractImmunizations = (bundle) => {\n    const immunizationResources = bundle.entry\n      .filter((entry) => entry.resource.resourceType === 'Immunization')\n\n    return immunizationResources;\n  };\n\n  const extractPatientData = (card) => {\n    const bundle = JSON.parse(card).vc.credentialSubject.fhirBundle;\n    const patient = bundle.entry.find(\n      (entry) => entry.resource.resourceType === 'Patient'\n    ).resource;\n\n    const name = extractPatientName(patient);\n    const dateOfBirth = patient.birthDate;\n    const immunizations = extractImmunizations(bundle);\n    return { name, dateOfBirth, immunizations };\n  };\n\n  const stopScanning = () => {\n    const video = document.getElementById('video');\n    video.srcObject.getTracks().forEach((track) => track.stop());\n    video.remove();\n    document.getElementById('canvas').hidden = true;\n    document.getElementById('loadingMessage').hidden = true;\n    setIsScanning(false);\n  };\n\n  function tick() {\n    const video = document.getElementById('video');\n    if (!video) {\n      return;\n    }\n\n    if (video.readyState === video.HAVE_ENOUGH_DATA) {\n      const canvasElement = document.getElementById('canvas');\n      const canvas = canvasElement.getContext('2d');\n      const loadingMessage = document.getElementById('loadingMessage');\n      const statusMessage = document.getElementById('statusMessage');\n\n      loadingMessage.hidden = true;\n      canvasElement.hidden = false;\n\n      canvasElement.height = video.videoHeight;\n      canvasElement.width = video.videoWidth;\n      canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n      const imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: 'dontInvert'\n      });\n      if (code) {\n        if (code.data.startsWith('shc:/')) {\n          stopScanning();\n          const decodedQr = decodeQr(code.data);\n          const patientData = extractPatientData(decodedQr);\n          setQrData(patientData);\n        } else {\n          statusMessage.innerText = 'QR code does not contain a SMART Health Card';\n        }\n      } else {\n        statusMessage.innerText = 'No QR code detected';\n      }\n    }\n\n    requestAnimationFrame(tick);\n  }\n\n  const startScanning = () => {\n    setIsScanning(true);\n    setQrData(null);\n\n    const video = document.createElement('video');\n    const loadingMessage = document.getElementById('loadingMessage');\n    video.id = 'video';\n    video.hidden = true;\n    document.children[0].appendChild(video);\n    loadingMessage.hidden = false;\n\n    navigator.mediaDevices\n      .getUserMedia({ video: { facingMode: 'environment' } })\n      .then((stream) => {\n        video.srcObject = stream;\n        video.setAttribute('playsinline', true); // required to tell iOS safari we don't want fullscreen\n        video.play().catch(() => {\n          /* ignore error since it's caused by us stopping the scan */\n        });\n        requestAnimationFrame(tick);\n      });\n  };\n\n  const startButton = (\n    <button type=\"button\" id=\"start\" onClick={startScanning} disabled={isScanning}>\n      Scan\n    </button>\n  );\n\n  const stopButton = (\n    <button type=\"button\" id=\"stop\" onClick={stopScanning} disabled={!isScanning}>\n      Stop\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>SMART Health Cards Web Verifier</h1>\n      </header>\n      <div>\n        {startButton}\n        {stopButton}\n      </div>\n      <div id=\"loadingMessage\" hidden>\n        Loading...\n      </div>\n      <canvas id=\"canvas\" hidden={!isScanning} />\n      <div id=\"statusMessage\" hidden={!isScanning}>\n        No QR code detected.\n      </div>\n      {qrData && !isScanning ? <HealthCardDisplay patientData={qrData} /> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}