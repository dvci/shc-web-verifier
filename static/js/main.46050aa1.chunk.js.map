{"version":3,"sources":["supporting-data/index.tsx","components/Validator.tsx","components/ValidationForm.tsx","App.js","reportWebVitals.js","index.js"],"names":["antigens","require","Repository","CodeService","PatientContext","PatientSource","FHIRWrapper","Validator","patientBundle","valueSetMap","antigen","elmJSONs","cql","fhirhelpers","libraryID","mainELM","find","e","library","identifier","id","Error","repository","resolve","version","codeService","fhirwrapper","FHIRv400","parameters","SeriesDefinition","wrap","patientSource","loadBundles","expr","expressions","patient_ctx","currentPatient","execute","Card","results","map","series","seriesName","complete","item","doseNumber","JSON","stringify","immunization","ValidationForm","props","handleChange","event","a","setState","values","bundle","target","value","handleSubmit","preventDefault","validateForm","submitForm","submitResult","submitSuccess","state","errors","bind","haveError","Object","keys","forEach","key","length","this","message","r","parse","action","onSubmit","onChange","rows","cols","type","className","role","haveErrors","React","Home","App","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iphIAUeA,EAJa,CACxB,e,iBCCAC,EAAQ,IAHVC,E,EAAAA,WACAC,E,EAAAA,YACAC,E,EAAAA,e,EAEqCH,EAAQ,KAAvCI,E,EAAAA,cAAeC,E,EAAAA,YAoBVC,EAAb,4FAUE,SACEC,EACAC,EACAC,GAGwB,IAFxBC,EAEuB,uDAFL,CAACC,EAAKC,GACxBC,EACuB,uDADH,qBAGdC,EAAUJ,EAASK,MAAK,SAACC,GAAD,OAAOA,EAAEC,QAAQC,WAAWC,KAAON,KACjE,IAAKC,EACH,MAAMM,MAAM,2CAAD,OAA4CP,IAGzD,IAAMQ,EAAa,IAAIpB,EAAWS,GAC5BO,EAAUI,EAAWC,QACzBT,EACAC,EAAQG,QAAQC,WAAWK,SAGvBC,EAAc,IAAItB,EAAYM,GAC9BiB,EAAc,IAAIpB,EAAYqB,SAC9BC,EAAa,CAACC,iBAAkBH,EAAYI,KAAK9B,EAASU,KAG1DqB,EAAgB,IAAI1B,EAAcsB,SACxCI,EAAcC,YAAY,CAACxB,IAC3B,IAAMyB,EAAOf,EAAQgB,YAAR,IACPC,EAAc,IAAI/B,EACtBc,EACAa,EAAcK,iBACdX,EACAG,GAEF,OAAOK,EAAKI,QAAQF,OA3CxB,KA+CaG,EAAkD,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAAe,gCAC1E,gCACI,gCACCA,EAAQC,KAAI,SAACC,GACZ,OACE,+BAAKA,EAAOC,WAAZ,IACCD,EAAOE,SAASH,KAAI,SAAAG,GAAQ,OAC7B,8BAAMA,EAASH,KAAI,SAAAI,GAAI,OACnB,gCAAMA,EAAKC,WAAX,KAAyBC,KAAKC,UAAUH,EAAKI,sCC9DhDC,EAAb,kDACI,WAAYC,GAAoB,IAAD,uBAC3B,cAAMA,IAaFC,aAduB,uCAcR,WACnBC,GADmB,SAAAC,EAAA,sDAGnB,EAAKC,SAAS,CACVC,OAAQ,CACJC,OAAQJ,EAAMK,OAAOC,SALV,2CAdQ,wDAwBvBC,aAxBuB,uCAwBR,WACnBP,GADmB,eAAAC,EAAA,yDAGnBD,EAAMQ,kBAEF,EAAKC,eALU,gCAMiC,EAAKC,aANtC,OAMTC,EANS,OAOf,EAAKT,SAAS,CAAES,iBAChB,EAAKT,SAAS,CAAEU,eAAe,IARhB,2CAxBQ,6DAK3B,EAAKC,MAAQ,CACTC,OAHoB,GAIpBX,OAHoB,IAMxB,EAAKJ,aAAe,EAAKA,aAAagB,KAAlB,gBACpB,EAAKR,aAAe,EAAKA,aAAaQ,KAAlB,gBAXO,EADnC,8CAqCI,SAAmBD,GACf,IAAIE,GAAqB,EAMzB,OALAC,OAAOC,KAAKJ,GAAQK,SAAQ,SAACC,GACrBN,EAAOM,GAAKC,OAAS,IACrBL,GAAY,MAGbA,IA5Cf,0BA+CI,WACI,QAAIM,KAAKT,MAAMV,OAAOC,SAClBkB,KAAKpB,SAAS,CACVY,OAAQ,CACJS,QAAS,2BAGV,KAtDnB,+DA4DI,2FACUC,EAAIrE,EAAU8B,QAChBS,KAAK+B,MAAMH,KAAKT,MAAMV,OAAOC,QAC7B,KACAkB,KAAKxB,MAAM4B,QAJnB,kBAKWF,GALX,gDA5DJ,0EAoEI,WAAU,IAAD,EAC2CF,KAAKT,MAA7CD,EADH,EACGA,cAAeD,EADlB,EACkBA,aAAcG,EADhC,EACgCA,OACrC,OACI,uBAAMa,SAAUL,KAAKf,aAArB,UACI,8BAAK,8CACL,8BACI,0BACID,MAAOgB,KAAKT,MAAMV,OAAOC,OACzBwB,SAAUN,KAAKvB,aACf8B,KAAM,IACNC,KAAM,QAGd,gCAAK,uBAAOC,KAAK,SAASzB,MAAM,YACT,IAAlBM,GACG,qBAAKoB,UAAU,mBAAmBC,KAAK,QAAvC,SACI,cAAC,EAAD,CAAM9C,QAASwB,UAKR,IAAlBC,IACIU,KAAKY,WAAWpB,IACb,qBAAKkB,UAAU,qBAAqBC,KAAK,QAAzC,sDAINrB,GACEU,KAAKY,WAAWpB,IACZ,qBAAKkB,UAAU,qBAAqBC,KAAK,QAAzC,oFAjGxB,GAAoCE,aCUpC,SAASC,IACP,OACE,qBAAKJ,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,qEAMOK,MAjCf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,eAAC,IAAD,WACE,8BACE,+BACE,6BAAI,cAAC,IAAD,CAAMM,GAAG,IAAIN,UAAU,WAAvB,oBACJ,6BAAI,cAAC,IAAD,CAAMM,GAAG,aAAaN,UAAU,WAAhC,8BAGR,eAAC,IAAD,WACE,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACE,cAACJ,EAAD,MAEF,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,aAAlB,SACE,cAAC,EAAD,CAAgBd,OAAQ,4BCZrBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46050aa1.chunk.js","sourcesContent":["import COVID from './AntigenSupportingData- COVID-19-508.parameters.json';\n\nexport interface IAntigens {\n    [antigen: string]: any;\n}\n\nconst antigens: IAntigens = {\n    'COVID-19-508': COVID\n};\n\nexport default antigens;","import React, { FunctionComponent } from 'react';\nimport cql from \"../output-elm/CDSiSupportingData.json\";\nimport fhirhelpers from \"../output-elm/FHIRHelpers-4.0.0.json\";\nimport antigens from '../supporting-data';\nconst {\n  Repository,\n  CodeService,\n  PatientContext,\n} = require(\"cql-execution\");\nconst { PatientSource, FHIRWrapper } = require(\"cql-exec-fhir\");\n\nexport interface IValidationResult {\n    seriesName: string;\n    complete: [\n        [\n            {\n                doseNumber: string,\n                doseIndex: number,\n                immunizationIndex: number,\n                immunization: any\n            }\n        ]\n    ];\n}\n\nexport interface IValidationResultProps {\n    results: IValidationResult[];\n}\n\nexport class Validator {\n  /**\n   *\n   * @param {Array} elmJSONs array of ELM JSON objects\n   * @param {Object} patientBundle patient record to execute against\n   * @param {Object} valueSetMap valueSetMap for CodeService\n   * * @param {Object} parameters named params\n   * @param {String} libraryID the library ID of the cql library corresponding to the ELM\n   * @returns {Object} cql-execution-results\n   */\n  public static execute(\n    patientBundle: any,\n    valueSetMap: any,\n    antigen: string,\n    elmJSONs: any[] = [cql, fhirhelpers],\n    libraryID: string = \"CDSiSupportingData\"\n    ): [IValidationResult] {\n    // 'main' ELM is the mcode library\n    const mainELM = elmJSONs.find((e) => e.library.identifier.id === libraryID);\n    if (!mainELM) {\n      throw Error(`Cannot find ELM library with library id ${libraryID}`);\n    }\n    // Resolve dependencies\n    const repository = new Repository(elmJSONs);\n    const library = repository.resolve(\n      libraryID,\n      mainELM.library.identifier.version\n    );\n\n    const codeService = new CodeService(valueSetMap);\n    const fhirwrapper = new FHIRWrapper.FHIRv400();\n    const parameters = {SeriesDefinition: fhirwrapper.wrap(antigens[antigen])};\n\n    // Load array of patient bundles\n    const patientSource = new PatientSource.FHIRv400();\n    patientSource.loadBundles([patientBundle]);\n    const expr = library.expressions[\"Run\"];\n    const patient_ctx = new PatientContext(\n      library,\n      patientSource.currentPatient(),\n      codeService,\n      parameters\n    );\n    return expr.execute(patient_ctx);\n  }\n}\n\nexport const Card: FunctionComponent<IValidationResultProps> = ({results}) => <aside>\n    <table>\n        <tbody>\n        {results.map((series) => {\n          return (\n            <tr>{series.seriesName}:\n            {series.complete.map(complete => \n            <div>{complete.map(item => \n                <div>{item.doseNumber}: {JSON.stringify(item.immunization)}</div>\n            )}\n            </div>)}\n            </tr>\n          );\n        })}\n        </tbody>\n    </table>\n</aside>\n","import * as React from \"react\";\nimport { Validator, IValidationResult, Card } from './Validator';\n\ninterface IFormProps {\n    action: string;\n}\n\nexport interface IValues {\n    [bundle: string]: any;\n}\n\nexport interface IErrors {\n    [message: string]: string;\n}\n\nexport interface IFormState {\n    values: IValues;\n    errors: IErrors;\n    submitSuccess?: boolean;\n    submitResult?: IValidationResult[];\n}\n\nexport class ValidationForm extends React.Component<IFormProps, IFormState> {\n    constructor(props: IFormProps) {\n        super(props);\n\n        const errors: IErrors = {};\n        const values: IValues = {};\n        this.state = {\n            errors,\n            values\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    private handleChange = async (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ): Promise<void> => {\n        this.setState({\n            values: {\n                bundle: event.target.value\n            }\n        });\n    };\n\n    private handleSubmit = async (\n        event: React.FormEvent<HTMLFormElement>\n    ): Promise<void> => {\n        event.preventDefault();\n\n        if (this.validateForm()) {\n            const submitResult: [IValidationResult] = await this.submitForm();\n            this.setState({ submitResult });\n            this.setState({ submitSuccess: true });\n        }\n    };\n\n    private haveErrors(errors: IErrors) {\n        let haveError: boolean = false;\n        Object.keys(errors).forEach((key: string) => {\n            if (errors[key].length > 0) {\n                haveError = true;\n            }\n        });\n        return haveError;\n    }\n\n    private validateForm(): boolean {\n        if(!this.state.values.bundle){\n            this.setState({\n                errors: {\n                    message: \"missing bundle value\"\n                }\n            });\n            return false;\n        }\n        \n        return true;\n    }\n\n    private async submitForm(): Promise<[IValidationResult]> {\n        const r = Validator.execute(\n            JSON.parse(this.state.values.bundle), \n            null, \n            this.props.action);\n        return r;\n    }\n\n    render() {\n        const { submitSuccess, submitResult, errors } = this.state;\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div><label>Bundle:</label></div>\n                <div>\n                    <textarea\n                        value={this.state.values.bundle}\n                        onChange={this.handleChange}\n                        rows={115}\n                        cols={115}\n                    />\n                </div>\n                <div><input type=\"submit\" value=\"Submit\" />\n                    {submitSuccess === true && (\n                        <div className=\"alert alert-info\" role=\"alert\">\n                            <Card results={submitResult!}/>\n                        </div>\n                    )}\n                </div>\n\n                {submitSuccess === false &&\n                    !this.haveErrors(errors) && (\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            Sorry, an unexpected error has occurred\n                        </div>\n                    )}\n                {!submitSuccess &&\n                    this.haveErrors(errors) && (\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            Sorry, the form is invalid. Please review, adjust and try again\n                        </div>\n                    )}\n            </form>\n        );\n    }\n}","import './App.css';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { ValidationForm } from \"./components/ValidationForm\";\n\nfunction App() {\n  return (    \n    <div className=\"App\">\n      <BrowserRouter>\n        <nav >\n          <ul>\n            <li><Link to=\"/\" className=\"nav-link\">Home</Link></li>\n            <li><Link to=\"/validator\" className=\"nav-link\">Validator</Link></li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" >\n            <Home />\n          </Route>\n          <Route exact path=\"/validator\">\n            <ValidationForm action={'COVID-19-508'} />\n          </Route>\n        </Switch>\n        </BrowserRouter>\n      </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>SMART Health Cards Web Verifier</h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}